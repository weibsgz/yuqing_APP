<template lang="html">
  <div class="subject-mangement">
    <div class="header">
      <span class='iconfont icon-caret back' @click='close()'></span>
      <span>编辑推送</span>
      <span class=""></span>
    </div>
    <div class="formlist-wrap">
      <div class="formlist">
        <span>主题名称</span>
        <div>
          <select name="selected">
            <template v-for="option in options">
              <option :value="option" v-if="option.themeId == editem.themeId" selected>
                {{ option.themeName }}
              </option>
              <option :value="option" v-else>
                {{ option.themeName }}
              </option>
            </template>
          </select>
        </div>
        <div class="formlist">
          <span>推送方式</span>
          <div class="bgl">
            <span v-for="item in types" :class='{active:item.flag}' @click='typesTab(item)'>{{item.name}}</span>
          </div>
        </div>
        <div class="formlist">
          <span>情感类型</span>
          <div class="bgl">
            <span v-for="item in sentimentList" :class='{active:item.active}' @click='qTypeTab(item)'>{{item.itemValue}}</span>
          </div>
        </div>
        <div class="formlist">
          <span>媒体类型</span>
          <div class="bgl">
            <span v-for="item in codeList" :class='{active:item.active}' @click='mTypeTab(item)'  >{{item.itemValue}}</span>
          </div>
        </div>
        <div class="formlist">
          <span>推送时段</span>
          <div>
            <input type="time" v-model='startTime' class="tstime"><input v-model='endTime' type="time" class="tstime fr">
          </div>
          <span class="msgTip">时间相同 则全天提醒</span>
        </div>
        <div class="formlist">
          <span>手机号</span>
          <input type="text" name="phones"  v-model='phones' placeholder='输入手机号' :value='editem.phones'  id='name'>
        </div>
        <div class="formlist">
          <span>邮箱</span>
          <input type="email" name="mails" v-model='mails' placeholder='输入邮箱地址' :value='sparray(editem.keyWords)'  id='keyWords'>
        </div>
        <button class="btn"  @click='submit(editem)'>保存</button>
      </div>
    </div>
  </div>
</template>

<script>
  //  import store from '../../../store'
  import axios from 'axios';
  import qs from 'qs';
  import { Toast } from 'mint-ui';
  export default {
    data() {
      return {
        options:'',//主题列表
        themeId:'',
        sentimentType:'',
        mediaType:'',
        themeName:'',
        codeList:[],//媒体类型
        sentimentList:[],//情感类型
        types:[{//推送方式
          name:'短信',
          flag:false
        },{
          name:'邮件',
          flag:false
        }]
        ,mails:"",
        phones:'',
        freeTime:'',
        startTime:'',
        endTime:''
      }
    },
    props:['editem','themesList'],
//    mounted(){
//      this.init()
//    },
    methods: {
      sparray(data){
        if(data){
          return data.join(" ")
        }
      },
      init(theItem){
//        console.log(444444444444444444,theItem)
        this.getMastList(theItem.sentimentType,theItem.mediaType);//媒体类型001,情感类型002
        this.types[0].flag=(theItem.phones)?true:false;
        this.types[1].flag=(theItem.mails)?true:false;
        this.phones=theItem.phones;
        this.mails=theItem.mails;
        var sn=theItem.freeTime?theItem.freeTime.split('-'):[];
        this.startTime=sn[0];
        this.endTime=sn[1];
        this.getoptions();//主题菜单
      },
      selectChange(item){
        this.themeId=item.themeId
        this.themeName=item.themeName
      },
      typesTab(item){
        if(!!item.flag){
          item.flag=false
        }else {
          item.flag=true
        }
      },
      mTypeTab(item){
        let _this=this
        this.codeList.forEach(i=>{
          if (i==item) {
          if(!!item.active){
            item.active=false
          }else {
            item.active=true
            _this.mediaType=item.itemCode;
          }
        }else{
          i.active=false
        }
      })
      },
      qTypeTab(item){
        let _this=this
        this.sentimentList.forEach(i=>{
          if (i==item) {
          if(!!item.active){
            item.active=false
          }else {
            item.active=true
            _this.sentimentType=item.itemCode;
          }
        }else{
          i.active=false
        }
      })
      },
      getoptions(){
        var  _this=this
        axios.post('/themeapp/getTheme',qs.stringify({'userId':this.$store.state.user.userId})).then(function (res) {
          if(res.data.code==0){
            _this.options =res.data.themeList;
          }
        })
      },
      getMastList(sen,med){
        var  _this=this
        axios.post('/userapp/getMastList',qs.stringify({'typeId':'001'})).then(function (res) {
          if(res.data.code==0){
            _this.codeList=res.data.codeList
            _this.codeList.forEach(v=>{
              if(v.itemCode==med){
              _this.$set(v,'active',true)
            }else{
              _this.$set(v,'active',false)
            }}
          )}
        });
        axios.post('/userapp/getMastList',qs.stringify({'typeId':'002'})).then(function (res) {
          if(res.data.code==0){
            _this.sentimentList=res.data.codeList
            _this.sentimentList.forEach(v=>{
              console.log(v.itemCode,sen)
              if(v.itemCode==sen){
              _this.$set(v,'active',true)
            }else{
              _this.$set(v,'active',false)
            }}
          )
          }
        });
      },
      submit() {
        if(this.types[0].flag==true){
          if(!this.phoneValidate(this.phones)){
            Toast({
              message: '手机号码填写不正确！',
              position: 'middle',
              duration: 1000,
            });
            return false
          }
        }
        if(this.types[1].flag==true){
          if(!this.emailValidate(this.mails)){
            Toast({
              message: '邮箱地址填写不正确！',
              position: 'middle',
              duration: 1000,
            });
            return false
          }
        }
        let  _this=this;
        let selected=document.getElementsByName('selected')[0].value;
        let  parms={
          userId:this.$store.state.user.userId,
          themeId:selected.themeId,
          mails:_this.mails,
          phones:_this.phones,
          mediaType:_this.mediaType,
          sentimentType:_this.sentimentType,
          themeName:selected.themeName,
          freeTime:_this.startTime+'-'+_this.endTime
        }
        axios.post('/warnapp/addWarn',qs.stringify(parms)).then(function (res) {
          if(res.data.code==0){
            _this.$emit("fetchTheme");
            _this.close()
            Toast({
              message: '提交成功',
            });
          }
        });
      },
//      submit(v) {
//        var phoneVal=document.getElementsByName('phones').value;
//        if(phoneVal === ""){
//          //sendObj['account'] = this.phoneNumber;
//          if(!this.phoneValidate(phoneVal)){
//            Toast({
//              message: '手机号码填写不正确！',
//              position: 'middle',
//              duration: 1000,
//            });
//            return false
//          }
//        }
//        var mailVal=document.getElementsByName('mails').value;
//        if(mailVal  === ""){
//          //sendObj['account'] = this.email;
//          if(!this.emailValidate(mailVal)){
//            Toast({
//              message: '邮箱地址填写不正确！',
//              position: 'middle',
//              duration: 1000,
//            });
//            return false
//          }
//        }
//        let  _this=this
//        let  parms={
//          userId:this.$store.state.user.userId,
//          themeId:_this.selected.themeId,
//          mails:_this.mails,
//          phones:_this.phones,
//          mediaType:_this.mediaType,
//          sentimentType:_this.sentimentType,
//          themeName:_this.selected.themeName,
//          freeTime:_this.startTime+'-'+_this.endTime
//        }
//        axios.post('/warnapp/addWarn',qs.stringify(parms)).then(function (res) {
//          if(res.data.code==0){
//            _this.close()
//            Toast({
//              message: '提交成功',
//            });
//            _this.$emit("fetchTheme");
//          }
//        });
//      },
      close() {
        document.querySelector('#name').value=""
        document.querySelector('#keyWords').value=""
        document.querySelector('#unkeyWords').value=""
        this.$emit('onChangePss','bb');
      },
      phoneValidate:function(value){
        let re=/^1\d{10}$/;
        if(re.test(value))
          return true
        else
          return false;
      },
      emailValidate:function(value){
        let re=/^(\w-*\.*)+@(\w-?)+(\.\w{2,})+$/;
        if(re.test(value))
          return true
        else
          return false;
      },
    },
//    store,
    mounted:function(){
      // this.themesList=this.editem;
    },
    components:{
    }
  }
</script>

<style lang="css" scoped>
  .inwrap{display: none}
  .subject-mangement{
    width: 100vw;
    height: calc(100vh);
    position: fixed;
    top:0;
    left:0;
    right:0;
    bottom:0;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    background: #fff;
    /*display: none;*/
    margin-bottom: 90px;
  }
  /*.inner{*/
    /*width: 100vw;*/
    /*height: 100%;*/

  /*}*/
  /*div.show{*/
    /*display: block;*/
    /*display: flex;*/

  /*}*/
  .header{
    height: 45px;
    background: #ccc;
    line-height: 45px;
    display: flex;
    justify-content: space-between;
    padding: 0 10px;
    background: #1c2532;
    color: #fff;
    font-size: 16px;
  }
  .header .icon-jiahao{
    font-size: 26px;

  }
  .header .back{
    font-size: 32px;
    transform: rotate(90deg);
    display: inline-block;
  }
  .formlist-wrap{
    flex: 1;
    padding:20px 30px;
    box-sizing: border-box;
    overflow-y: auto;
    padding-bottom: 80px;
  }
  .formlist{
    display: flex;
    flex-direction: column;
    margin-bottom: 30px;
  }
  .formlist span{
    font-size: 15px;
    margin-bottom: 10px;
    color: #000;
  }
  .formlist input{
    height: 40px;
    padding: 0 10px;
    background: #ebebeb;
    border-radius: 5px;
    outline: none;
  }
  .formlist select{
    height: 40px;
    width: 100%;
    padding: 0 10px;
    border-radius: 5px;
    background: #fff;
    display: inline-block;
    border:1px solid #999999;
    outline: none;
    color: #000000;
    font-size: 16px;
    margin-bottom: 30px;
  }
  .formlist .tip{
    line-height: 1.2;
    font-size: 12px;
    margin-top: 5px;
    color: #999;
  }
  .btn{
    height: 40px;
    border-radius: 5px;
    color: #fff;
    background: #ff3333;
    display: block;
    border:none;
    width: 100%;
    font-size: 15px;outline: none;
  }
  .bgl>span.active{

    border:1px solid #666666;
    color: #666666;
  }
  .bgl>span{
    line-height: 32px;
    display: inline-block;
    height: 32px;
    padding: 0 20px;
    border-radius: 3px;
    border:1px solid #999999;
    color: #999999;
    margin-right: 5px;
  }
  .bgl>span.active{
    border:1px solid #ff3333;
    color: #ff3333;
    background: url(/static/img/right.png) no-repeat 4px center;
    background-size: 20%;
  }
  .msgTip{
    color: #ff3333 !important;
    text-align: right;
    font-size: 0.8rem !important;
    margin-bottom: 0px !important;
    margin-top: 10px;
  }
  input.tstime[type=time]{
    height:40px;
    line-height: 40px;
    width: 40%;
    background: #fff;
    border:1px solid #999999;
    outline: none;
    color: #000000;
    font-size: 16px;
    text-align: center;
  }
  .fr{
    float: right;
  }
</style>
